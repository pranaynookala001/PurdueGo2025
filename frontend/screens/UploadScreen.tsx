import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  SafeAreaView,
} from 'react-native';
import * as DocumentPicker from 'expo-document-picker';
import { StackNavigationProp } from '@react-navigation/stack';
import { RootStackParamList } from '../App';
import { getApiUrl, API_ENDPOINTS } from '../config';

type UploadScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Upload'>;

interface Props {
  navigation: UploadScreenNavigationProp;
}

const MAX_RETRIES = 3;
const RETRY_DELAY = 1000; // 1 second

const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export default function UploadScreen({ navigation }: Props) {
  const [isUploading, setIsUploading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<any>(null);

  const pickDocument = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({
        type: 'application/pdf',
        copyToCacheDirectory: true,
      });

      if (!result.canceled && result.assets[0]) {
        setSelectedFile(result.assets[0]);
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to pick document');
    }
  };

  const uploadPDF = async (retryCount = 0) => {
    if (!selectedFile) {
      Alert.alert('Error', 'Please select a PDF file first');
      return;
    }

    setIsUploading(true);

    try {
      console.log(`Starting PDF upload... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);
      console.log('Selected file:', selectedFile);
      
      const formData = new FormData();
      formData.append('file', {
        uri: selectedFile.uri,
        type: 'application/pdf',
        name: selectedFile.name,
      } as any);

      console.log('Sending request to:', getApiUrl(API_ENDPOINTS.UPLOAD_SCHEDULE));
      
      const response = await fetch(getApiUrl(API_ENDPOINTS.UPLOAD_SCHEDULE), {
        method: 'POST',
        body: formData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      console.log('Response status:', response.status);
      const data = await response.json();
      console.log('Response data:', data);

      if (response.ok) {
        if (data.courses && data.courses.length > 0) {
          console.log('Courses extracted successfully:', data.courses);
          console.log('Navigating to CourseConfirmation screen...');
          navigation.navigate('CourseConfirmation', { courses: data.courses });
        } else {
          console.log('No courses found in the response');
          Alert.alert('No Courses Found', 'No course codes were found in the PDF. Please check the file format.');
        }
      } else {
        throw new Error(data.error || 'Failed to upload PDF');
      }
    } catch (error) {
      console.error('Upload error details:', error);
      
      // Retry logic for network errors
      if (retryCount < MAX_RETRIES - 1) {
        console.log(`Retrying upload in ${RETRY_DELAY}ms...`);
        await sleep(RETRY_DELAY);
        return uploadPDF(retryCount + 1);
      }

      // If we've exhausted retries or it's not a network error, show the error
      Alert.alert(
        'Connection Error',
        'Failed to connect to server. Please check:\n\n' +
        '1. The backend server is running\n' +
        '2. You are connected to the same network\n' +
        '3. The server address is correct\n\n' +
        'Technical details: ' + (error instanceof Error ? error.message : String(error))
      );
    } finally {
      if (retryCount === MAX_RETRIES - 1) {
        setIsUploading(false);
      }
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <View style={styles.instructions}>
          <Text style={styles.instructionTitle}>Upload Your Schedule PDF</Text>
          <Text style={styles.instructionText}>
            Select the PDF file generated by your advisor containing your course recommendations.
            The app will automatically extract course codes from the document.
          </Text>
        </View>

        <View style={styles.uploadSection}>
          <TouchableOpacity
            style={styles.selectButton}
            onPress={pickDocument}
            disabled={isUploading}
          >
            <Text style={styles.selectButtonText}>
              {selectedFile ? 'üìÑ PDF Selected' : 'üìÅ Select PDF File'}
            </Text>
          </TouchableOpacity>

          {selectedFile && (
            <View style={styles.fileInfo}>
              <Text style={styles.fileName}>{selectedFile.name}</Text>
              <Text style={styles.fileSize}>
                {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
              </Text>
            </View>
          )}

          <TouchableOpacity
            style={[
              styles.uploadButton,
              (!selectedFile || isUploading) && styles.uploadButtonDisabled,
            ]}
            onPress={() => uploadPDF()}
            disabled={!selectedFile || isUploading}
          >
            {isUploading ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.uploadButtonText}>Upload & Extract Courses</Text>
            )}
          </TouchableOpacity>
        </View>

        <View style={styles.tips}>
          <Text style={styles.tipsTitle}>Tips:</Text>
          <Text style={styles.tipItem}>‚Ä¢ Make sure the PDF contains course codes in "Priority SUBJ NUMBER" format</Text>
          <Text style={styles.tipItem}>‚Ä¢ File should be generated by your academic advisor</Text>
          <Text style={styles.tipItem}>‚Ä¢ Supported format: PDF files only</Text>
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  instructions: {
    marginBottom: 40,
  },
  instructionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  instructionText: {
    fontSize: 16,
    color: '#666',
    lineHeight: 24,
  },
  uploadSection: {
    alignItems: 'center',
    marginBottom: 40,
  },
  selectButton: {
    backgroundColor: '#f0f0f0',
    paddingVertical: 20,
    paddingHorizontal: 40,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#ddd',
    borderStyle: 'dashed',
    marginBottom: 20,
    minWidth: 200,
    alignItems: 'center',
  },
  selectButtonText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
  },
  fileInfo: {
    backgroundColor: '#f8f8f8',
    padding: 12,
    borderRadius: 8,
    marginBottom: 20,
    alignItems: 'center',
  },
  fileName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
  },
  fileSize: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
  },
  uploadButton: {
    backgroundColor: '#B1810B',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 8,
    minWidth: 200,
    alignItems: 'center',
  },
  uploadButtonDisabled: {
    backgroundColor: '#ccc',
  },
  uploadButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  tips: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 8,
  },
  tipsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  tipItem: {
    fontSize: 14,
    color: '#666',
    marginBottom: 6,
    lineHeight: 20,
  },
});